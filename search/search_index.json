{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Welcome to my documentation for Smilin' Streaming. I've included the Database Models and the API Endpoints in the docs.","title":"Index"},{"location":"#index","text":"Welcome to my documentation for Smilin' Streaming. I've included the Database Models and the API Endpoints in the docs.","title":"Index"},{"location":"databases/","text":"System Database (app) users Field Name Data Type username varchar(50), primary_key password_hash varchar(256) salt1 varchar(512) salt2 varchar(512) artists Field Name Data Type username varchar(50), primary_key name varchar(256) password_hash varchar(256) salt1 varchar(512) salt2 varchar(512) Database For Each User (x) playlists Field Name Data Type name varchar(50), primary_key table_name varchar(256) song_history Field Name Data Type song_id int, foreign_key (ref. songs.songs.id) listen_count int artist_history Field Name Data Type artist_id int, foreign_key (ref. songs.artists.id) listen_count int following Field Name Data Type artist_id int, foreign_key (ref. songs.artists.id) playlist_xxx Field Name Data Type song_id int, primary_key, foreign_key (ref. songs.artists.id) date_added datetime Song Database (songs) artists Field Name Data Type id int, primary_key name varchar(256), foreign key (ref. app.artists.name) followers int songs Field Name Data Type id int, primary_key name varchar(128) artist_id int, foreign_key (ref. songs.artists.id) album varchar(256) genre varchar(20) filename varchar(256) listen_count int","title":"System Database (app)"},{"location":"databases/#system-database-app","text":"","title":"System Database (app)"},{"location":"databases/#users","text":"Field Name Data Type username varchar(50), primary_key password_hash varchar(256) salt1 varchar(512) salt2 varchar(512)","title":"users"},{"location":"databases/#artists","text":"Field Name Data Type username varchar(50), primary_key name varchar(256) password_hash varchar(256) salt1 varchar(512) salt2 varchar(512)","title":"artists"},{"location":"databases/#database-for-each-user-x","text":"","title":"Database For Each User (x)"},{"location":"databases/#playlists","text":"Field Name Data Type name varchar(50), primary_key table_name varchar(256)","title":"playlists"},{"location":"databases/#song_history","text":"Field Name Data Type song_id int, foreign_key (ref. songs.songs.id) listen_count int","title":"song_history"},{"location":"databases/#artist_history","text":"Field Name Data Type artist_id int, foreign_key (ref. songs.artists.id) listen_count int","title":"artist_history"},{"location":"databases/#following","text":"Field Name Data Type artist_id int, foreign_key (ref. songs.artists.id)","title":"following"},{"location":"databases/#playlist_xxx","text":"Field Name Data Type song_id int, primary_key, foreign_key (ref. songs.artists.id) date_added datetime","title":"playlist_xxx"},{"location":"databases/#song-database-songs","text":"","title":"Song Database (songs)"},{"location":"databases/#artists_1","text":"Field Name Data Type id int, primary_key name varchar(256), foreign key (ref. app.artists.name) followers int","title":"artists"},{"location":"databases/#songs","text":"Field Name Data Type id int, primary_key name varchar(128) artist_id int, foreign_key (ref. songs.artists.id) album varchar(256) genre varchar(20) filename varchar(256) listen_count int","title":"songs"},{"location":"rest/","text":"API Routes /users /users/exists Field Values Parameters username (string) Description This returns 'false' if a user with the provided username doesn't exist and 'true' if it does /users/register Field Values Parameters username (string), password (string) Description This checks if a user with the given username doesn't exist, and if it doesn't creates the user /users/login Field Values Parameters username (string), password (string) Description This returns a User Object if the password is correct /users/toggle_follow Field Values Parameters name (string), username (string), password (string) Description This checks if the user is following the artist, if yes it unfollows, if no, it follows /artists /artists/exists Field Values Parameters username (string) Description This returns 'false' if an artist with the provided username doesn't exist and 'true' if it does /artists/register Field Values Parameters username (string), password (string) Description This checks if an artists with the given username doesn't exist, and if it doesn't creates the artist /artists/login Field Values Parameters username (string), password (string) Description This returns an Artist Object if the password is correct /artists/get/artist Field Values Parameters name (string), artist (Artist) Description This describes the artist using the artists' credentials /artists/get/user Field Values Parameters name (string), user (User) Description This describes the artist /playlists /playlists/list Field Values Parameters user (User) Description This returns a list of all the user's playlists /playlists/create Field Values Parameters name (string), user (User) Description This creates a playlist, if one of the same name doesn't exist /playlists/get Field Values Parameters name (string), user (User) Description This returns a list of songs /playlists/delete Field Values Parameters name (string), user (User) Description This deletes a user's playlist /playlists/songs /playlists/songs/add Field Values Parameters name (string), song (string), user (User) Description This adds a song to the specified playlist if it doesn't exist /playlists/songs/delete Field Values Parameters name (string), song (string), user (User) Description This deletes a song from the specified playlist if it exists /songs /songs/listen Field Values Parameters song (string), user (User) Description This returns the song file /songs/get Field Values Parameters name (string), user (User) Description This describes the song /songs/upload Field Values Parameters song_name (string), album (string), genre (string), filename (string), song (File), artist (Artist) Description This deletes a song from the specified playlist if it exists /songs/recommend/previous Field Values Parameters user (User) Description This returns a list of songs the user has listened to, ordered by the listen count /songs/recommend/artists Field Values Parameters user (User) Description This returns a list of songs from 3 artists the user follows /albums/get Field Values Parameters name (string), user (User) Description This describes the album /autocomplete Field Values Parameters query (string) Description This returns a list of possible matches from the database","title":"API Routes"},{"location":"rest/#api-routes","text":"","title":"API Routes"},{"location":"rest/#users","text":"","title":"/users"},{"location":"rest/#usersexists","text":"Field Values Parameters username (string) Description This returns 'false' if a user with the provided username doesn't exist and 'true' if it does","title":"/users/exists"},{"location":"rest/#usersregister","text":"Field Values Parameters username (string), password (string) Description This checks if a user with the given username doesn't exist, and if it doesn't creates the user","title":"/users/register"},{"location":"rest/#userslogin","text":"Field Values Parameters username (string), password (string) Description This returns a User Object if the password is correct","title":"/users/login"},{"location":"rest/#userstoggle_follow","text":"Field Values Parameters name (string), username (string), password (string) Description This checks if the user is following the artist, if yes it unfollows, if no, it follows","title":"/users/toggle_follow"},{"location":"rest/#artists","text":"","title":"/artists"},{"location":"rest/#artistsexists","text":"Field Values Parameters username (string) Description This returns 'false' if an artist with the provided username doesn't exist and 'true' if it does","title":"/artists/exists"},{"location":"rest/#artistsregister","text":"Field Values Parameters username (string), password (string) Description This checks if an artists with the given username doesn't exist, and if it doesn't creates the artist","title":"/artists/register"},{"location":"rest/#artistslogin","text":"Field Values Parameters username (string), password (string) Description This returns an Artist Object if the password is correct","title":"/artists/login"},{"location":"rest/#artistsgetartist","text":"Field Values Parameters name (string), artist (Artist) Description This describes the artist using the artists' credentials","title":"/artists/get/artist"},{"location":"rest/#artistsgetuser","text":"Field Values Parameters name (string), user (User) Description This describes the artist","title":"/artists/get/user"},{"location":"rest/#playlists","text":"","title":"/playlists"},{"location":"rest/#playlistslist","text":"Field Values Parameters user (User) Description This returns a list of all the user's playlists","title":"/playlists/list"},{"location":"rest/#playlistscreate","text":"Field Values Parameters name (string), user (User) Description This creates a playlist, if one of the same name doesn't exist","title":"/playlists/create"},{"location":"rest/#playlistsget","text":"Field Values Parameters name (string), user (User) Description This returns a list of songs","title":"/playlists/get"},{"location":"rest/#playlistsdelete","text":"Field Values Parameters name (string), user (User) Description This deletes a user's playlist","title":"/playlists/delete"},{"location":"rest/#playlistssongs","text":"","title":"/playlists/songs"},{"location":"rest/#playlistssongsadd","text":"Field Values Parameters name (string), song (string), user (User) Description This adds a song to the specified playlist if it doesn't exist","title":"/playlists/songs/add"},{"location":"rest/#playlistssongsdelete","text":"Field Values Parameters name (string), song (string), user (User) Description This deletes a song from the specified playlist if it exists","title":"/playlists/songs/delete"},{"location":"rest/#songs","text":"","title":"/songs"},{"location":"rest/#songslisten","text":"Field Values Parameters song (string), user (User) Description This returns the song file","title":"/songs/listen"},{"location":"rest/#songsget","text":"Field Values Parameters name (string), user (User) Description This describes the song","title":"/songs/get"},{"location":"rest/#songsupload","text":"Field Values Parameters song_name (string), album (string), genre (string), filename (string), song (File), artist (Artist) Description This deletes a song from the specified playlist if it exists","title":"/songs/upload"},{"location":"rest/#songsrecommendprevious","text":"Field Values Parameters user (User) Description This returns a list of songs the user has listened to, ordered by the listen count","title":"/songs/recommend/previous"},{"location":"rest/#songsrecommendartists","text":"Field Values Parameters user (User) Description This returns a list of songs from 3 artists the user follows","title":"/songs/recommend/artists"},{"location":"rest/#albumsget","text":"Field Values Parameters name (string), user (User) Description This describes the album","title":"/albums/get"},{"location":"rest/#autocomplete","text":"Field Values Parameters query (string) Description This returns a list of possible matches from the database","title":"/autocomplete"}]}